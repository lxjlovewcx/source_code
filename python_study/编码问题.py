#编码问题
-为什么需要编码？
    -如何使用一长串的01代码表示复杂 的信息
    -01代码本来就是二进制数字
    编码：uncode
    解码：decode
-编码简史，
    第一阶段：ascii对于美国人已经足够了，因为字符很少。0-127
    第二阶段：其他人民的文字用不上ascii，德国人和中国人字符很多，128-255.所以就革新个照。
    每个国家都有自己的一套编码系统,
    而这个时候中国的边拿为GB2312:
    - latin 兼容欧洲大多数语言
    - 韩国台湾：BIG5
    - 日本： JIS
    - ANSI-MBCS(multi-bytes character set, 多字节字符集。)由微软完成转换，各搞各的。
    第三阶段：Unicode（ISO）:全国统一的编码
        utf-8 一种实现Unicode编码的实现方式。
#  编码表示方式
    -ASCII-american standard code for imformtion interchange。
        -所有的控制字符编码（包括回车，删除等）编码在0-31范围以及127
        -所有标点符号，英文大写小写在32-126之间。
        -预留128-255之间位置。
        -0xxx xxxx是他的编码形式
    latin1
    - Unicode 给出的是一个码表,具体实现没有确定。
    - 0-0x10ffff来映射这些字符，最多可以容纳1114112个字符。最多可以有6个字节，反正就是够你用
    -中文编码范围4e00-9fcf。
        底码位的好啊，效率高啊，快啊。
    - UTF=
    - UTF-8
        - 使用的是6个字节中的那些部分。
    常用的5000个放在底码位，其他的放在其他码位。这样分配考虑经济性。
    - UTF-16，UTF-32
        -UTF-16是历史遗留问题
        -UTF-32浪费空间，真正常用的就是UTF-8。
- UCS-2
    - 通用字符集
    - UCS-2与Unicode完全相同
    - 2个字节。
- UCS-4
    - 使用4个字节。
# 常用概念
    - 编码/解码 uncode/encode
    编码：把人类能看懂的东西编码成bity。
    大尾和小尾：通过BOM可以确定是大尾还是小尾。
        - ‘汉’ 6c49
    - BOM
        -UTF-8没有这个大尾小尾问题。
    - UTF -16 会出现问题。
    -BOM 用于解决UTF -16 的问题。标记。
#python中的编码问题。
- str
- bytes 字节流
- bytearray




